class BinarySearchTree
{
	class Node
	{
		public int key;
		public Node left;
		public Node right;
		
		public Node(int key)
		{
			this.key = key;
			this.left = null;
			this.right = null;
		}
	}
	
	Node root;
	
	public BinarySearchTree()
	{
		root = null;
	}
	
	public void insert(int key)
	{
		root = insertRec(root, key);
	}
	
	public Node insertRec(Node root, int key)
	{
		if (root == null)
		{
			root = new Node(key);
			return root;
		}
		if (key < root.key)
		{
			root.left = insertRec(root.left,key);
		}
		else if (key > root.key)
		{
			root.right = insertRec(root.right,key);
		}
		return root;
	}
	
	public void inorder()
	{
		inorderRec(root);
	}
	
	public void inorderRec(Node root)
	{
		if (root != null)
		{
			inorderRec(root.left);
			System.out.println(root.key);
			inorderRec(root.right);
		}
	}
	
	public void search(int key)
	{
		root = searchRec(root, key);
	}
	
	public Node searchRec(Node root, int key)
	{
		while(root != null)
		{
			if (key < root.key)
			{
				root = root.left;
			}
			else if(key > root.key)
			{
				root = root.right;
			}
			else if (key == root.key)
			{
				System.out.println("key is found:");
				return root;
			}
		}
		System.out.println("key not found:");
		return root;
	}
}

public class BST_Search
{
	
	public static void main(String args[]) 
	{
		BinarySearchTree tree = new BinarySearchTree();
		
		tree.insert(56);
		tree.insert(30);
		tree.insert(70);
		
		tree.inorder();
		
		tree.search(56);
	}
	
}
